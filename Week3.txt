* <2022-02-07 Mon>

  
#+begin_src java
  public static int months (int principal, double rate, int payment){
      // Requires: principal, rate, and payment all positive and payment is sufficiently large to drive the principal to zero.
      // Effects:  return the number of months required to pay off the principal

  }
#+end_src


check vs unchecked exceptions
- Checked exception: exception that should be recoverable (and you should write code (try/catch...) to handle it)
- Unchecked exception: exceptrions that we cannot recover from / fatal errors   


Polynomial
- 10 
- ax + bx + 5
- 10x + 5x^2 - 4

- c_1*x_1^d_1 + c_2*x_2^d_2


- 5x*y  # does not allow in Poly implementation
- cannot have negative degree (allows deg >= 0)
- coefficients are integers

5+3*x^2
Poly(deg=2, trms=[5,3])    5+3*x
Poly(deg=2, trms=[5,0,3])  5+3x^2

Poly(deg=2, trms=[5,0,3,0,0,0,0,0...])  not allowed in Poly implementation

Abstraction
Abstract representation: 5+3*x
Concrete/Internal representation:
Poly(deg=2, trms=[5,0,3],
Poly(deg=2, trms=[5,0,3,0,0,0,0,0...]))

toString()

#+begin_src java
  public class Poly {
      private int[] trms;
      private int deg;

      // Effects: Initializes this to be the zero polynomial
      public Poly() {
         trms = new int[1]; trms[0] = 0;
         deg = 0;
      }

      // Effects: If n < 0 throws IllegalArgumentException
      // else initializes this to be the polynomial c*x^n
      public Poly(int c, int n) throws IllegalArgumentException {
         if (n < 0) {
            throw new IllegalArgumentException("Poly(int, int) constructor");
         }
         if (c == 0) {
            trms = new int[1]; trms[0] = 0;
            deg = 0;
            return;
         }
         trms = new int[n+1];
         for (int i=0; i < n; i++) {
            trms[i] = 0;
         }
         trms[n] = c;
         deg = n;
      }

      private Poly (int n) {
         trms = new int[n+1];
         deg = n;
      }

      // Effects: returns the degree of this
      public int degree() {
         return deg;
      }

      // Effects: returns the coefficent of the term of this whose exponent is d
      public int coeff_book(int d){
          if (d < 0 || d > deg) return 0 else return terms[d];
      }
    
      // @throws IAE if d < 0
      // Effects: returns the coefficent of the term of this whose exponent is d
      public int coeff(int d) {
         if (d < 0) throw new IAE();
         return (d > deg) ? 0 : trms[d];
      }

      // Effects: If q is null throw NullPointerException
      // else return the Poly this - q
      public Poly sub(Poly q) throws NullPointerException {
         return add(q.minus());
      }

      // Effects: return the Poly -this
      public Poly minus() {
         Poly r = new Poly(deg);
         for (int i=0; i <= deg; i++) {
            r.trms[i] = -trms[i];
         }
         return r;
      }

      // Effects: If q is null throw NullPointerException
      // else return the Poly this + q
      public Poly add(Poly q) {
         Poly la, sm;
         if (deg > q.deg) {
            la = this; sm = q;
         }
         else {
            la = q; sm = this;
         }
         int newdeg = la.deg;
         if (deg == q.deg) {
            for (int k = deg; k > 0; k--) {
               if (trms[k] + q.trms[k] != 0) {
                  break;
               }
               else {
                  newdeg--;
               }
            }
         }
         Poly r = new Poly(newdeg);
         int i;
         for (i = 0; i <= sm.deg && i <= newdeg; i++) {
             r.trms[i] = sm.trms[i] + la.trms[i];
         }
         for (int j = i; j <= newdeg; j++) {
            r.trms[j] = la.trms[j];
         }
         return r;
      }

      // Effects: If q is null throw NullPointerException
      // else return the Poly this * q
      public Poly mul(Poly q) throws NullPointerException {

         if ((q.deg == 0 && q.trms[0] == 0) || (deg == 0 && trms[0] == 0)) {
            return new Poly();
         }

         Poly r = new Poly(deg + q.deg);
         r.trms[deg + q.deg] = 0;
         for (int i = 0; i <= deg; i++) {
            for (int j = 0; j <= q.deg; j++) {
               r.trms[i+j] += trms[i]*q.trms[j];
            }
         }
         return r;
      }

      public String toString() {
         String r = "Poly:";

         if (deg == 0 || trms[0] != 0) {
             r += " " + trms[0];
         }

         for (int i = 1; i <= deg; i++) {
            if (trms[i] < 0) {
               r += " - " + -trms[i] + "x^" + i;
            }
            else if (trms[i] > 0) {
               r += " + " +  trms[i] + "x^" + i;
            }
         }
         return r;
      }
  }
#+end_src


q = [1,2,3]
q' = q.enQueue(4)
q' = [1,2,3,4]   Queue.elements=[1,2,3,4] , Queue.size=4
q = [1,2,3]

q = [1,2,3]
e = q.peek(); //e = 1
q' = q.deQueue();
q' = [2,3] 


---
Hoare Logic
- Automatic way to *verify* that an implementation satisfies a given specification (pre/post conditions)
- Imperative programs (the version I am showing you does not deal with advanced OO concepts, no inheritence, no pointers/references)
- 


Hoare Tripple
{P} S {Q}
{P} : precondition  (e.g.,  0 < x < 5)
{Q} : postcondition  (e.g.,  output = x * 2)
S   : your program (a list of statements)  (e.g., [int y = x * 2; return y;])

Goal: verify that executing S under the assumption that P holds will result in Q (satisfies Q).

If this goal is met, then S is correct wrt to P and Q.

*Partial correctness*:  also assuming that S will terminate  **
Total correctness: does not make the assumption that S will terminate (halting problem)

:= assignment


{True} x := 5 {x==5 or x== 6 or x > 6}  ... valid
{True} x := 5 {x>1}  ... valid
{True} x := 5 {x==5}  ... valid  (preferred, strongest)

{True} x := 5 {x>5}  ... invalid ,  S is INCORRECT wrt P and Q.